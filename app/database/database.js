// this is the main database connector used by the app
// storage model is a persistent NeDB

// libraries
const Parser = require('./parser.js');
const ReplayTypes = require('./constants.js');

// databases are loaded from the specified folder when the database object is created
var Datastore = require('nedb');

class Database {
  constructor(databasePath) {
    this._path = databasePath;

    // open the databases
    this._db = {};
    this._db.matches = new Datastore({ filename: this._path + '/matches.db', autoload: true });
    this._db.heroData = new Datastore({ filename: this._path + '/hero.db', autoload: true });
    this._db.players = new Datastore({ filename: this._path + '/players.db', autoload: true });
    this._db.settings = new Datastore({ filename: this._path + '/settings.db', autoload: true });
  }

  // processes a replay file and adds it to the database
  processReplay(file) {
    // parse it
    var data = Parser.parse(file, Parser.CommonReplayData);
    var details = data.details[0];

    // start with the match, since a lot of things are keyed off of it
    // the match id is not generated until insertion (key off unique id generated by database)
    // TODO: de-duplication
    var match = {};

    // header data
    match.version = data.header[0].m_version;
    match.type = data.header[0].m_type;
    match.loopLength = data.header[0].m_elapsedGameLoops;
    match.length = loopsToSeconds(match.loopLength);

    // map details
    match.map = details.m_title;
    match.date = winFileTimeToDate(details.m_timeUTC);

    // players
    // the match will just store the players involed. The details will be stored
    // in a document in the heroData db
    // players are 1-indexed, look at details first
    var players = {};
    match.playerIDs = [];
    var playerDetails = details.m_playerList;

    for (var i = 0; i < playerDetails.length; i++) {
      var playerID = i + 1;
      var pdata = playerDetails[i];
      var pdoc = {};

      // collect data
      pdoc.hero = pdata.m_hero;
      pdoc.name = pdata.m_name;
      pdoc.uuid = pdata.m_toon.m_id;
      pdoc.region = pdata.m_toon.m_region;
      pdoc.realm = pdata.m_toon.m_realm;
      pdoc.team = pdata.m_teamId;  /// the team id doesn't neatly match up with the tracker events, may adjust later
      pdoc.ToonHandle = pdata.m_toon.m_realm + '-' + pdata.m_toon.m_programId + '-' + pdata.m_toon.m_region + '-' + pdata.m_toon.m_id;
      pdoc.gameStats = {};
      pdoc.gameStats.awards = [];

      players[playerID] = pdoc;
      match.playerIDs.push(pdoc.uuid);
    }

    // the tracker events have most of the useful data
    // track a few different kinds of things here, this is probably where most of the interesting stuff will come from
    var stats = {};
    var tracker = data.trackerevents;

    for (var i = 0; i < data.tracker; i++) {
      var event = tracker[i];

      // case on event type
      if (event.m_type === ReplayTypes.TrackerEvent.Score) {
        // score is real long, separate function
        this.processScoreArray(event.m_instanceList, match, players);
      }
    }

    // insert match
    var self = this;
    this._db.matches.insert(match, function (err, newDoc) {
      // update and insert players
      for (var i in players) {
        players[i].matchID = newDoc._id;
        self._db.heroData.insert(players[i]);
      }
    });
  }

  processScoreArray(data, match, players) {
    // iterate through each object...
    for (var i = 0; i < data.length; i++) {
      var name = data[i].m_name;
      var valArray = data[i].m_values;

      if (!name.startsWith('EndOfMatchAward')) {
        for (var j = 0; j < valArray.length; j++) {
          var playerID = j + 1;
          players[j].gameStats[name] = valArray[j].m_value;
        }
      }
      else {
        for (var j = 0; j < valArray.legnth; j++) {
          var playerID = j + 1;
          if (valArray[j] !== 0) {
            players[j].gameStats.awards.push(name);
          }
        }
      }
    }
  }
}

// general parsing utilities, not db specific
function winFileTimeToDate(filetime) {
  return new Date(filetime / 10000 - 11644473600000);
}

function loopsToSeconds(loops) {
  // apparently hots does 16 updates per second
  return loops / 16;
}

exports.HeroesDatabase = Database;